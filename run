#!/usr/bin/env python3

import sys
import os
import subprocess
import json

def sort_key(json_obj):
    return -json_obj["NET_SCORE"]

def main():
    if len(sys.argv) < 2:
        print("Error: No mode specified.")
        return 1

    try:
        with open(os.getenv("LOG_FILE"), "w") as f:
            pass
    except:
        # No log file was provided or it couldn't be opened
        pass

    mode = sys.argv[1]
    if mode == "install":
        try:
            node_ver = subprocess.run(['node --version'], stdout=subprocess.PIPE, shell=True).stdout.decode('utf-8')
        except:
            # Node not installed
            node_ver = 0


        ## # If node is not installed, install nvm and use it to install 18.14.0
        if (node_ver != "v18.14.0"):
            p = subprocess.Popen('bash update_node.sh', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            p.wait()
            #subprocess.run('bash update_node.sh' shell=True)


        ## commands = [    
        ##     ['curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash'],
        ##     ['export NVM_DIR="$HOME/.nvm"'],
        ##     ['[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'],
        ##     ['[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"']#,
        ## ]
        ## 
        ## 
        ## print (node_ver)
        ## 
        ## input ("Press Enter to continue...")
        ## 
        ## # If not 18.14.0, install nvm and use it to install 18.14.0
        ## if (node_ver != "v18.14.0"):
        ##     for command in commands:
        ##         process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
        ##         process.wait()
        ## 
        ##     p = subprocess.Popen(['/usr/bin/bash', '-i', '-c', 'nvm install 18.14.0'])
        ##     p.wait()
        ## 
        ##     p = subprocess.Popen(['/usr/bin/bash', '-i', '-c', 'nvm use 18.14.0'])
        ##     p.wait()
        

        # INSTALL DEPENDENCIES
        ret_val = subprocess.run("npm install", shell=True)
        if ret_val.returncode != 0:
            print("Error: NPM Install failed")
            return 1

        return 0

    elif mode == "build":
        # BUILD PROJECT
        ret_val = subprocess.run("tsc src/*.ts", shell=True)
        if ret_val.returncode != 0:
            print("Error: Build failed")
            return 1
        return 0

    elif mode == "test":
        # RUN TESTS
        # TODO: Add code to run tests
        pass
    else:
        # RANK MODULES
        if len(sys.argv) < 2:
            print("Arg 1 needs to be URL to input file or one of")
            return 1

        file_path = sys.argv[1]

        try:
            file = open(file_path, "r")
        except FileNotFoundError:
            print(f"Error: File not found at path: {file_path}")
            return 1

        with file:
            output_list = []
            for line in file: 
                # create the command string
                line = line.strip()
                command = f"node src/main.js {line}"

                # call main with each URL as argument
                result = subprocess.run(command, shell=True, capture_output=True)
                output_list.append(json.loads(result.stdout.decode().strip()))
    
        output_list = sorted(output_list, key=sort_key)
        print (("\n".join([json.dumps(item) for item in output_list])))


if __name__ == "__main__":
    main()