#!/usr/bin/env python3

import sys
import os
import subprocess
import json
import re
import pathlib


def sort_key(json_obj):
    """
    Sort key for sorting json objects in descending order of NET_SCORE
    """
    return -json_obj["NET_SCORE"]


def parse_test_results(test_dump: str):
    """
    Parse results of running jest on tests
    :param test_dump: stdout from running jest
    :return: test_cases_passed, total_test_cases, percentage_coverage
    """

    searches: list = [
        r"All files\s*\|[^\|]*\|[^\|]*\|[^\|]*\|\s*",
        r"\d*\.\d*",
        r"Tests:\s*(\s*\d\s*failed,\s*\d\s*skipped,\s*|\d\s*failed,\s*|\d\s*skipped,\s*)?",
        r"\d*",
        r"\d*\s*passed,\s*",
        r"\d*",
    ]

    results: list = []

    for i in range(0, len(searches), 2):
        search_result: re.Match = re.search(searches[i], test_dump)
        if not search_result:
            return -1, -1, -1
        _, end = search_result.span()
        test_dump = test_dump[end:]

        search_result: re.Match = re.search(searches[i + 1], test_dump)
        if not search_result:
            return -1, -1, -1
        _, end = search_result.span()
        results.append(test_dump[:end])

    coverage, passed, total = results
    return passed, total, coverage


def main():
    write_to_file = False # set to true to write output to output.ndjson

    if len(sys.argv) < 2:
        print("Error: No mode specified.")
        return 1

    try:
        with open(os.getenv("LOG_FILE"), "w") as f:
            pass
    except:
        # No log file was provided or it couldn't be opened
        # error_msg = "Warning: No log file provided.\n"
        # error_msg += "To enable logging, set a path to a logging file in "
        # error_msg += "environment variable LOG_FILE and set the log level "
        # error_msg += "in environment variable LOG_LEVEL."
        # print(error_msg)
        pass

    mode = sys.argv[1]
    if mode == "install":
        # INSTALL DEPENDENCIES
        ret_val = subprocess.run("npm install --loglevel=error", shell=True, capture_output=True)

        if ret_val.returncode != 0:
            print("Error: NPM Install failed")
            return 1

        ret_val = ret_val.stdout.decode("utf-8")
        match = re.search(r"up to date", ret_val)
        if match:
            print("0 dependencies installed: Up to date")
        else:
            num_packs = re.search(r"added (\d+) packages", ret_val)
            if num_packs:
                print(f"{num_packs.group(1)} dependencies installed... ")


    elif mode == "build":
        # BUILD PROJECT
        ret_val = subprocess.run("tsc src/*.ts", shell=True)
        if ret_val.returncode != 0:
            print("Error: Build failed")
            return 1
        return 0

    elif mode == "test":
        # RUN TESTS
        command = "npm test"
        result: subprocess.CompletedProcess = subprocess.run(
            command, shell=True, capture_output=True
        )

        passed, total, coverage = parse_test_results(
            result.stdout.decode("utf-8") + result.stderr.decode("utf-8")
        )

        if passed == total == coverage == -1:
            print("Testing data could not be acquired")
            return 1
        else:
            print(f"Total: {total}")
            print(f"Passed: {passed}")
            print(f"Coverage: {coverage}%")
            print(f"{passed}/{total} test cases passed. {coverage}% line coverage achieved.")

        return 0
    else:
        # RANK MODULES
        if len(sys.argv) < 2:
            print("Arg 1 needs to be URL to input file or one of")
            return 1

        if not os.getenv("GITHUB_TOKEN"):
            print("Error: Please specify GitHub token in environment variable GITHUB_TOKEN")
            return 1

        file_path = sys.argv[1]

        try:
            file = open(file_path, "r")
        except FileNotFoundError:
            print(f"Error: File not found at path: {file_path}")
            return 1

        node_ver = subprocess.run("node -v", shell=True, capture_output=True).stdout.decode("utf-8").strip()

        with file:
            output_list = []
            for line in file:
                # create the command string
                line = line.strip()

                if (node_ver == "v18.14.0"):
                    command = f"node src/main.js {line}"
                else:
                    command = f"bin/bin/node src/main.js {line}"

                # call main with each URL as argument
                result = subprocess.run(command, shell=True, capture_output=True)
                try:
                    json_output = json.loads(result.stdout.decode().strip())
                    output_list.append(json_output)
                except:
                    print(f"Error when running command: {command}")
                    return 1

        nan_list = []
        good_list = []
        
        # remove any modules that failed to be ranked
        for item in output_list:
            if (item['NET_SCORE'] is not None):
                good_list.append(item)
            else:
                nan_list.append(item)

        output_list = sorted(good_list, key=sort_key)
        output_list.extend(nan_list)
        
        output_str = "\n".join([json.dumps(item) for item in output_list])
        
        if write_to_file:
            root_dir = pathlib.PurePath(__file__).parent
            with open(root_dir.joinpath("output.ndjson"), "w") as f:
                f.write(output_str)
        else:
            print(output_str)

main()


## if __name__ == "__main__":
##     main()
## 
## else:
##     print("Error: This file is not meant to be imported")
##     print("Please run this file directly or edit line 158 of ece-461-project/run to allow it to be imported.")
##     exit(1)